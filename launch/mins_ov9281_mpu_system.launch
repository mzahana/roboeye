<launch>
    <arg name="run_camera" default="$(optenv ENABLE_CAMERA false)"/>
    <arg name="run_img_splitter" default="$(optenv ENABLE_IMAGE_SPLITTER false)"/>
    <arg name="run_imu" default="$(optenv ENABLE_IMU false)"/>
    <arg name="run_mins" default="$(optenv ENABLE_MINS false)"/>
    <arg name="run_mavros" default="$(optenv ENABLE_MAVROS false)"/>

    <!-- Include basic.launch from libcamera_ros package -->
    <group if="$(eval run_camera == true)">
        <include file="$(find libcamera_ros)/launch/basic.launch" >
            <arg name="camera_name" value="$(optenv CAMERA_NAME '')"/>
            <arg name="camera_id" value="$(optenv CAMERA_ID 0)"/>
            <arg name="stream_role" value="$(optenv CAMERA_STREAM_ROLE 'still')"/>
            <arg name="pixel_format" value="$(optenv CAMERA_PIXEL_FORMAT 'RGB888')"/>
            <arg name="frame_id" value="$(optenv CAMERA_FRAME 'libcamera_frame')"/>
            <arg name="resolution_width" value="$(optenv CAMERA_WIDTH 1280)"/>
            <arg name="resolution_height" value="$(optenv CAMERA_HEIGHT 400)"/>

            <!-- will it run using GNU debugger? -->
            <arg name="DEBUG" default="false" />
        </include>
    </group>

     <!-- Include rgb2mono_node from image_splitter_ros package -->
    <group if="$(eval run_img_splitter == true)">
        <node name="rgb2mono_node" pkg="image_splitter_ros" type="rgb2mono_node" output="screen">
            <!-- Remap the input image topic -->
            <remap from="/camera/image_raw" to="$(optenv IMG_SPLIT_STEREO_TOPIC 'cam0/image_raw')" />
            <!-- Remap the output image topic -->
            <remap from="/image_mono" to="$(optenv IMG_SPLIT_CAM0_TOPIC 'cam0/image_raw')" />
        </node>
    </group>

    <!-- Include mpu6050_driver.launch from mpu6050_driver package -->
    <group if="$(eval run_imu == true)">
        <include file="$(find mpu6050_driver)/launch/mpu6050_driver2.launch" >
            <arg name="mpu_yaml" value="$(optenv MPU_YAML '')"/>
        </include>
    </group>

    <!-- MAVROS -->
    <group if="$(eval run_mavros == true)">
        <include file="$(find mavros)/launch/px4.launch" >
            <arg name="fcu_url" value="$(optenv MAVROS_FCU_URL '/dev/ttyAMA0:921600')"/>
            <arg name="tgt_system" value="$(optenv MAVROS_TGT_SYSTEM 1)"/>
            <arg name="gcs_url" value="$(optenv MAVROS_GCS_URL '')"/>
        </include>

        <!-- Publish static transform from 'global' frame to 'odom' frame -->
        <node name="static_tf_pub_global_to_odom"
            pkg="tf"
            type="static_transform_publisher"
            args="0 0 0 0 0 0 global odom 5" />

        <!-- Publish static transform from 'imu' frame to 'base_link' frame -->
        <node name="static_tf_pub_imu_to_base_link"
            pkg="tf"
            type="static_transform_publisher"
            args="0 0 0 0 0 0 imu base_link 5" />
    </group>

    <!-- MINS -->
    <group if="$(eval run_mins == true)">
        <node name="mins_subscribe" pkg="mins" type="subscribe" output="screen" clear_params="true" required="true">
            <param name="config_path"       type="str"  value="$(optenv MINS_CONFIG_PATH '/home/vio/config/mins_ov9218_mpu/config.yaml')" />
            <remap from="/mins/imu/odom" to="$(optenv MINS_ODOM_TOPIC '/mavros/odometry/out')" />
        </node>
    </group>

</launch>
